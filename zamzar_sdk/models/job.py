# coding: utf-8

"""
    Zamzar API

    Zamzar provides a simple API for fast, scalable, high-quality file conversion for 100s of formats.

    The version of the OpenAPI document: 0.0.7
    Contact: api-sdks@zamzar.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from zamzar_sdk.models.export import Export
from zamzar_sdk.models.failure import Failure
from zamzar_sdk.models.file import File
from zamzar_sdk.models.model_import import ModelImport
from typing import Optional, Set
from typing_extensions import Self

class Job(BaseModel):
    """
    Represents the process of converting a file to another format.
    """ # noqa: E501
    id: StrictInt = Field(description="The unique identifier assigned to the job")
    key: Optional[StrictStr] = Field(default=None, description="The API key used to create the job")
    status: Optional[StrictStr] = Field(default=None, description="The current status of the job")
    failure: Optional[Failure] = None
    sandbox: Optional[StrictBool] = Field(default=None, description="Indicates whether or not the job was processed on the developer sandbox (i.e. at no cost)")
    created_at: Optional[datetime] = Field(default=None, description="The time at which the job was created (UTC in [ISO_8601](https://en.wikipedia.org/wiki/ISO_8601))")
    finished_at: Optional[datetime] = Field(default=None, description="The time at which the job finished if successful, or null otherwise (UTC in [ISO_8601](https://en.wikipedia.org/wiki/ISO_8601))")
    var_import: Optional[ModelImport] = Field(default=None, alias="import")
    source_file: Optional[File] = None
    target_files: Optional[List[File]] = Field(default=None, description="The output from the job")
    target_format: Optional[StrictStr] = Field(default=None, description="The name of the format to which `source_file` is being converted")
    credit_cost: Optional[StrictInt] = Field(default=None, description="The cost in conversion credits of the job")
    export_url: Optional[StrictStr] = Field(default=None, description="The location to which all converted files will be copied")
    exports: Optional[List[Export]] = Field(default=None, description="An array of objects representing the process of copying converted files to the location specified in the export_url (when submitting a job via the `/jobs` endpoint)")
    options: Optional[Dict[str, Any]] = Field(default=None, description="Additional options for the conversion")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "key", "status", "failure", "sandbox", "created_at", "finished_at", "import", "source_file", "target_files", "target_format", "credit_cost", "export_url", "exports", "options"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['initialising', 'converting', 'successful', 'failed', 'cancelled']):
            raise ValueError("must be one of enum values ('initialising', 'converting', 'successful', 'failed', 'cancelled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Job from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of failure
        if self.failure:
            _dict['failure'] = self.failure.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_import
        if self.var_import:
            _dict['import'] = self.var_import.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_file
        if self.source_file:
            _dict['source_file'] = self.source_file.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in target_files (list)
        _items = []
        if self.target_files:
            for _item in self.target_files:  # type: ignore[assignment]
                if _item:
                    _items.append(_item.to_dict())
            _dict['target_files'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in exports (list)
        _items = []
        if self.exports:
            for _item in self.exports:  # type: ignore[assignment]
                if _item:
                    _items.append(_item.to_dict())
            _dict['exports'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if finished_at (nullable) is None
        # and model_fields_set contains the field
        if self.finished_at is None and "finished_at" in self.model_fields_set:
            _dict['finished_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Job from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "key": obj.get("key"),
            "status": obj.get("status"),
            "failure": Failure.from_dict(obj["failure"]) if obj.get("failure") is not None else None,
            "sandbox": obj.get("sandbox"),
            "created_at": obj.get("created_at"),
            "finished_at": obj.get("finished_at"),
            "import": ModelImport.from_dict(obj["import"]) if obj.get("import") is not None else None,
            "source_file": File.from_dict(obj["source_file"]) if obj.get("source_file") is not None else None,
            "target_files": [File.from_dict(_item) for _item in obj["target_files"]] if obj.get("target_files") is not None else None,
            "target_format": obj.get("target_format"),
            "credit_cost": obj.get("credit_cost"),
            "export_url": obj.get("export_url"),
            "exports": [Export.from_dict(_item) for _item in obj["exports"]] if obj.get("exports") is not None else None,
            "options": obj.get("options")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


